//洛谷P1135
/*是我第一道ac的bfs题目
bfs,即广度优先搜索，核心是二叉树的层序遍历，实际上就是暴力，我们需要借助一个queue来实现，
把一个节点加入队列后，先遍历它，再把它的儿子按照顺序放入队列中，然后把这个节点删除，只留下它的儿子
加入这个队列非空，那么就一直遍历下去，假如空了或者已经找到目标状态了，停止遍历
但是为了增加效率，防止反复遍历已经遍历过的地方，或者一些不符合条件的地方
最好是把二叉树的某个节点剪下来，这对结果是没有影响的，反而可以增加运行效率，所以称为剪枝
剪枝是bfs一个很重要的知识点，可能会有很多的技巧
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int N,A,B,k[205],vis[205];      //设置vis数组，没有访问过默认为0，访问过标记为1，用于剪枝
struct state                            //设置节点以及它的状态，这个节点是几楼（floor），到这个节点为止走了几步（steps）
{
	int floor;
	int steps;
};
queue<state> q;
void bfs()             //此处为核心代码
{
	state cur,nex;
	cur.floor=A;         //开始在A楼
	cur.steps=0;        //开始走了0步
	q.push(cur);           //先把初始节点加入队列，等待遍历
	vis[A]=1;                 //把A楼的vis标记为1，表示已经访问过，进行剪枝
	while(!q.empty())             //判断队列里是否有待遍历的节点，有就进入
	{
		cur=q.front();         //当前节点设置为队列的首元素，
		q.pop();                    //直接删掉首元素
		if(cur.floor==B)        //开始判断首元素的状态，假如楼层已经达到B了，直接输出结果
		{
			printf("%d\n",cur.steps);
			return;
		}
		nex.floor=cur.floor+k[cur.floor];          //假如floor不是B，那么我们先写上升的情况
		nex.steps=cur.steps+1;                         //步数+1，楼层加ki
		if(nex.floor<=N)                                    //假如没有超过最高层数
		{
			if(vis[nex.floor]==0)          //如果这一层电梯没有到过
			{
				vis[nex.floor]=1;          //那么访问，并且访问标记为1进行剪枝，并将其加入队列
				q.push(nex);
			}
		}
		nex.floor=cur.floor-k[cur.floor];              //然后写下降的情况，思路同上升的代码
		nex.steps=cur.steps+1;
		if(nex.floor>=1)
		{
			if(vis[nex.floor]==0)         
			{
				vis[nex.floor]=1;
				q.push(nex);
			}
		}
	}
	printf("%d\n",-1);                                       //假如队列都遍历完了也没到达目标楼层，那么说明这是不可能 的，输出-1
}
int main()
{
	scanf("%d%d%d",&N,&A,&B);
	for(int i=1;i<=N;i++)
		scanf("%d",&k[i]);
	bfs();
	return 0;
}




//洛谷P1443
/*本题的bfs核心是设置一个位移数组arr，并且每次遍历所有可能的走法，选择合法的位移加入队列中继续进行搜索
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int n,m,a,b,vis[405][405]={0},res[405][405];
class node
{
public:
	int x,y,steps;
	node():steps(0){};
};
node arr[9];
queue<node> q;
void bfs()
{
	node cur,nex;
	cur.x=a;
	cur.y=b;
	q.push(cur);
	vis[a][b]=1;
	while(!q.empty())
	{
		cur=q.front();
		res[cur.x][cur.y]=cur.steps;
		q.pop();
		for(int i=1;i<=8;i++)      //核心是遍历位移数组，其他与一般bfs基本没有区别
		{
			nex.x=cur.x+arr[i].x;
			nex.y=cur.y+arr[i].y;
			nex.steps=cur.steps+1;
			if(nex.x>=1&&nex.x<=n&&nex.y>=1&&nex.y<=m&&vis[nex.x][nex.y]==0)
			{
				vis[nex.x][nex.y]=1;
				q.push(nex);
			}
		}
	}
}
int main()
{
	memset(res,-1,sizeof(res));
	arr[1].x=2;arr[1].y=1;
	arr[2].x=2;arr[2].y=-1;
	arr[3].x=-2;arr[3].y=1;
	arr[4].x=-2;arr[4].y=-1;
	arr[5].x=1;arr[5].y=2;
	arr[6].x=1;arr[6].y=-2;
	arr[7].x=-1;arr[7].y=2;
	arr[8].x=-1;arr[8].y=-2;
	scanf("%d%d%d%d",&n,&m,&a,&b);
	bfs();
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
			printf("%d ",res[i][j]);
		printf("\n");
	}
	return 0;
}





//洛谷P1162
/*本题本质也是一道变形的bfs题目，核心是找到某一个位置的上下左右位置一直延伸是否为1；假如都是1那么就自然退出循环，那么就填上2
假如遇到一个边界是0的了，就没必要循环了，直接异常跳出，那么不填涂
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int n,mat[33][33],mov[4][2]={{0,1},{0,-1},{1,0},{-1,0}};
int vis[33][33],cnt=0;
struct node{
	int x,y;
};
queue<node> q;
void bfs()
{
	for(int i=2;i<n;i++)
	{
		for(int j=2;j<n;j++)
		{
			memset(vis,0,sizeof(vis));
			if(mat[i][j]==1)continue;
			node cur,nex;
			vis[i][j]=1;
			cur.x=i;cur.y=j;
			q.push(cur);
			while(!q.empty())
			{
				cur=q.front();
				q.pop();
				for(int k=0;k<4;k++)
				{
					nex.x=cur.x+mov[k][0];
					nex.y=cur.y+mov[k][1];
					if(vis[nex.x][nex.y]==1)continue;
					if(mat[nex.x][nex.y]==0||mat[nex.x][nex.y]==2)
					{
						if(nex.x<1||nex.x>n||nex.y<1||nex.y>n)
						{
							while(!q.empty())q.pop();
							goto g;      //假如遇到一个边界是0的了，就没必要循环了，直接异常跳出
						}
						vis[nex.x][nex.y]=1;
						q.push(nex);	
					}	
				}
		 	} 
		 	mat[i][j]=2;   //假如四方边界都能遇上1那么四次位移数组循环后就自然退出循环，填涂成2   
			g:
		 	cnt=0;     //cnt用于goto语句的占位，无实际意义，异常跳出，那么不填涂
		}
	}
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			scanf("%d",&mat[i][j]);
	bfs();
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
			printf("%d ",mat[i][j]);
		printf("\n");
	}
	return 0;
}



//洛谷P1596
/*题目其实就是简单的bfs，已经无需多说，只要是w的时候标记为访问即可
但是这个b题为什么我前几次尝试连样例都过不去呢？想了大概20分钟发现可能是输入出问题了
我开的char类型arr数组，换行符属于空白，占一个位置，所以这里输入我转为使用getchar，每换一次行进行额外的一次getchar忽略换行符
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int n,m,vis[105][105],cnt;
int mov[8][2]={{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
struct node{
	int x,y;
};
char arr[105][105];
queue<node> q;
void bfs()
{
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
		{
			node cur,nex;
			if(vis[i][j]==0&&arr[i][j]=='W')
			{
				cur.x=i;cur.y=j;
				q.push(cur);
				vis[i][j]=1;
				while(!q.empty())
				{
					cur=q.front();
					q.pop();
					for(int k=0;k<8;k++)
					{
						nex.x=cur.x+mov[k][0];
						nex.y=cur.y+mov[k][1];
						if(vis[nex.x][nex.y]==0)
						{
							vis[nex.x][nex.y]=1;
							if(arr[nex.x][nex.y]=='W')
								q.push(nex);
						}	
					}
				}
				cnt++;
			}
		}
	printf("%d",cnt);	
}
int main()
{
	scanf("%d%d",&n,&m);
	
	for(int i=1;i<=n;i++)              //我卡了好久才发现可能是输入的问题
	{
		char ch=getchar();        //每次忽略一个换行符，妈的这个卡了我好久
		for(int j=1;j<=m;j++)
		{
			ch=getchar(); 
			arr[i][j]=ch;
		}
	}
	bfs();
	return 0;
}

//洛谷P2895
/*简单bfs，剪枝条件为某个点位被摧毁的最早时间以及是否访问
代码如下*/
#include <bits/stdc++.h>
using namespace std;
int M,tempx,tempy,tempt;
struct node{
	int x,y,t;
};
class mat{
public:
	int d,t;
	mat():t(0x3f3f3f3f),d(1){}
};
queue<node> q;
int mset[5][2]={{0,-1},{0,1},{-1,0},{1,0},{0,0}};
int mov[4][4]={{0,1},{1,0},{0,-1},{-1,0}};
mat m[305][305];
int vis[305][305];
void bfs()
{
	node cur,nex;
	cur.x=0;cur.y=0;cur.t=0;
	q.push(cur);
	vis[0][0]=1;
	while(!q.empty())
	{
		cur=q.front();
		if(m[cur.x][cur.y].t==0x3f3f3f3f)
		{
			printf("%d",cur.t);
			return;
		}
		q.pop();
		for(int i=0;i<=3;i++)
		{
			nex.x=cur.x+mov[i][0];
			nex.y=cur.y+mov[i][1];
			nex.t=cur.t+1;
			if(nex.x>=0&&nex.y>=0&&vis[nex.x][nex.y]==0&&nex.t<m[nex.x][nex.y].t)
			{
				vis[nex.x][nex.y]=1;
				q.push(nex);
			}
		}
	}
	printf("%d",-1);
}
int main()
{
	scanf("%d",&M);
	for(int i=1;i<=M;i++)
	{
		scanf("%d%d%d",&tempx,&tempy,&tempt);
		for(int j=0;j<5;j++)
			if(tempx+mset[j][0]>=0&&tempy+mset[j][1]>=0)
				m[tempx+mset[j][0]][tempy+mset[j][1]].t=min(m[tempx+mset[j][0]][tempy+mset[j][1]].t,tempt);   //为了记录最早摧毁时间，选择使用min函数
	}
	bfs();
    return 0;
} 



//这两周也学习了简单的快读模板，代码如下
inline int read()
{
	int s=0,w=1;
	char ch=getchar();
	while(!isdigit(ch))     //假如不是数字字符，忽视，如果是‘-’字符那么自然结果要*-1
	{
		if(ch=='-')w*=-1;
		ch=getchar(); 
	}
	while(isdigit(ch))      //假如是数字字符，进行运算
	{
		s=s*10+ch-'0';
		ch=getchar();
	}
	return s*w;
}



//洛谷P2249
/*这一道题目是二分查找，因为总是写错我选择直接stl
经过学习我学到了lower_bound(start,end,key)函数，本质是二分查找按顺序第一次出现key的位置，返回值为迭代器or地址
start为要找容器的开始地址，end是要找容器的最后一个地址的后一位地址，假如找不到会返回end
用lower_bound注意原序列必须有序，upper_bound是返回第一个比key大的数字的第一个位置
这俩函数直接替代所有二分
代码如下*/
#include <bits/stdc++.h>
using namespace std;
int n,m;
int arr[1000005],lef,rig,mid;
void solve(int x)
{
	int ans=lower_bound(arr+1,arr+n+1,x)-arr;
	if(x!=arr[ans]) printf("-1 ");
	else printf("%d ",ans);
}
int main()
{
	n=read();m=read();
	for(int i=1;i<=n;i++)
		arr[i]=read();
	for(int i=1;i<=m;i++)
		solve(read());
    return 0;
} 




//洛谷P2036
/*这个傻逼perket卡了我2天，总算是把这一类选或者不选的问题搞明白了
本质是dfs，但是本题这个dfs的核心是要设置一个选或者不选的循环
对于这个题目的研究也使得我对dfs的递归有了更好的了解和掌握
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int n,temps=1,tempb,vis[12],cnt,Min =0x3f3f3f3f;
struct node{
	int s,b;
};
node arr[12];
void dfs(int step)
{
	if(step==n+1)
	{
		cnt=0;//注意每次要重置cnt 
		for(int i=1;i<=n;i++)//每一个选择情况对应一个结果 
		{
			if(vis[i])
			{
				temps*=arr[i].s;
				tempb+=arr[i].b;
			}
			else cnt++;//cnt用于排除全部不选的情况 
		}
		if(cnt==n)return;//cnt用于排除全部不选的情况
		Min=min(Min,abs(temps-tempb));//每次取最小的结果 
		temps=1;tempb=0;//重置这两个暂时的容器 
		return;
    }
    for(int i=1;i>=0;i--)  //核心代码吗，选或不选的标准循环，1表示选，0表示不选 
	{
		vis[step]=i;
		dfs(step+1);
		vis[step]=0;   //回溯
	}
} 
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d%d",&arr[i].s,&arr[i].b);
	dfs(1);
	printf("%d",Min);
	return 0;
}



//洛谷P1157
/*这是一道经典组合题目，题意为1~n，n个数选r个进行字典序排列
其算法实现一般利用bfs，这对我来说是一个全新的领域，它的关键在于回溯
考虑成有r个箱子，那么我们依次从1开始选择到r放入
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int n,k,vis[22],res[22];   //res数组代表箱子，vis数组表示第i个数为0那么不选，为1那么选
void dfs(int step)    
{
	if(step==r+1)   //要放入第r+1个数字，显然箱子不够，需要跳出循环
	{
		for(int i=1;i<=r;i++)
			cout<<setw(3)<<res[i];     //按照箱子顺序进行输出
		printf("\n");
		return;
	}
	for(int i=1;i<=n;i++)
	{
		if(vis[i]==0&&res[step-1]<i)//要注意将要放入当前箱子的这个数必须小于前一个箱子里的数，这样才能保证字典序输出
		{
			vis[i]=1;
			res[step]=i;
			dfs(step+1);//要放第r+1个数字，直接返回到调用处了，这时候已经输出了一组按顺序放的答案
			vis[i]=0;    //这时候把第r个数标记为不选，回溯，这时候i会从r继续++到r+1
		}
	}
}
int main()
{
	
	scanf("%d%d",&n,&k);
	dfs(1);            //要放入第一个数字了
	return 0;
}



//洛谷P1036
/*本题的坑比之处在于，可能会输入多个相同的数据，这样不能根据数据本身的大小来进行排序
那么我们不妨利用该数据在原有数组下的绝对下标当作序号来进行组合，并且可以实现下标的字典序排列
我们就可以利用struct来实现，这样就转变为了基础的n个数选m个数进行字典序排列的简单题，即洛谷P1157
代码如下*/
#include <bits/stdc++.h>
using namespace std;
int n,k,vis[22],cnt,sum;
struct node{
	int x,y;
};
node arr[22],res[22];
int isprime(int p)        //判断是否为质数
{
	for(int i=2;i*i<=p;i++)
	{
		if(p==2)return 1;
		else if(!(p%i))return 0;
	}
	return 1;
}
void dfs(int step)
{
	if(step==k+1)
	{
		sum=0;
		for(int i=1;i<=k;i++)
			sum+=res[i].x;
		if(isprime(sum))cnt++;              //是质数，计数器就+1
		return;
	}
	for(int i=1;i<=n;i++)     //i实际上是对arr数组按照下标遍历
	{
		if(vis[i]==0&&res[step-1].y<i)      //结果数组的前一个数据的绝对下标要小于当前遍历的这个下标i
		{                                                             //这样就可以保证不重复不遗漏
			vis[i]=1;
			res[step]=arr[i];
			dfs(step+1);
			vis[i]=0;
		}
	}
}
int main()
{
	scanf("%d%d",&n,&k);
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&arr[i].x);
		arr[i].y=i;  //带上这个数字的绝对下标（表示这个数字在arr数组下的下标，用struct实现）
	}	
	dfs(1);
	printf("%d",cnt);
    return 0;
}
