//就本周所做的几道题作以下总结
//以下几题均使用C++编译


/*洛谷P1143
本题主要目的是进行进制转换，本人初步进行以下考虑
一.初步考虑是否能使用C++内置函数？后期学习发现有内置函数itoa，但是后期得知洛谷oj评判系统是Linux无法使用该函数？故作罢
二.之后考虑使用数学方法求余解答，故选择此法
1.考虑先把所给数转换成10进制，再转化成目的进制
2.转换成10进制的方法，考虑从输入的字符串的最末位开始向前读取，用向10进制转换的一般公式进行实现
3.转换成目标进制方法，考虑使用多次求余，并将结果存在某个容器中，由于储存和输出的方向相反，故选择stack容器
4.关于字符对应十进制数字，本人起初考虑使用数组检索，然而考虑到字符本身的ascll码，故转而使用if条件判断
以下为部分代码*/
void P1143()
{
    int n, m;
    double d=0;
    stack<char> q;
    string s;
    cin >> n >> s >> m;
    for (int i = s.size() - 1; i >= 0; i--)
    {
        if (s[i] < 'A') d += pow(n, s.size() - 1 - i) * (s[i] - '0');
        else d += pow(n, s.size() - 1 - i) * (s[i] - 'A' + 10);
    }
    int dec = (int)d;
    while (dec)
    {
        if (dec % m <= 9)q.push((char)(dec % m + '0'));
        else q.push((char)(dec % m + 'A' - 10));
        dec /= m;
    }
    while (!q.empty())
    {
        cout << q.top();
        q.pop();
    }
}


/*洛谷P1469
由题意可知，此题目标为找出出现次数为奇数的数字，考虑到异或的运算规则，故使用
以下为源代码*/
#include<iostream>
int main()
{
    int n,temp,ans=0;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d",&temp);
        ans^=temp;
    }
    printf("%d",ans);
    return 0;
}


/*洛谷P1100
本题主要考虑数据范围以及不足32位补0，由题意应该取unsigned int
为了实现不足32位补0，考虑初始化一个0数组，再进行如洛谷P1143方式赋值后，再按照题意输出
要注意使用pow函数返回的是double，故我使用了强制转换
以下为部分代码*/
void P1100()
{
    unsigned int n;
    double d = 0;
    int count = 0;
    scanf("%u", &n);
    int arr[32] = { 0 };
    while (n != 0)
    {
        arr[count] = n % 2;
        n /= 2;
        count++;
    }
    for (int i = 0; i < 16; i++)
    {
        d += pow(2, i + 16) * arr[i];
    }
    for (int i = 16; i < 32; i++)
    {
        d += pow(2, i - 16) * arr[i];
    }
    printf("%u", (unsigned int)d);
}


/*洛谷P1595
非常经典的全错位排列，其递推思想每一个合格的高中生必须要掌握，不多赘述
其核心是其递推公式(n - 1)*(D(n - 1) + D(n - 2))，由于n不大，这里使用了递归法，没有爆栈的担心
特别注意，由于全错位排列增长率较大，故输出时控制为long long格式
以下为源代码*/
#include<bits/stdc++.h>
long long D(int n)
{
    if (n == 1) return 0;
    if (n == 2) return 1;
    return (n - 1)*(D(n - 1) + D(n - 2));
}
int main()
{
    int n;
    scanf("%d", &n);
    printf("%lld", D(n));
    return 0;
}
