//洛谷P3383
/*本题根据题目名称，容易得知目标是使用线性筛进行素数筛选
暴力求解的时间复杂度会达到O(n^2)，但是线性筛可以将其优化为O(n)
线性筛，其实是埃拉托色尼筛的一个优化，他的核心在于维护一个素数数组
其中保存的是已经筛选出来的素数，目的是去除所有以某个数为最小质因数的合数
以下是线性筛的核心代码*/
void LinearSeive()
{
	int n,q;
	cin>>n>>q;
	vector<int> isprime(n+1,1);//先假设都是素数
	vector<int> prime;//用来维护已筛素数
	for(int i=2;i<=n;i++)//遍历范围内的所有数，除了0,1
	{	
		if(isprime[i])prime.push_back(i);     //2、3肯定是素数，直接加入
		for(int j=0;j<prime.size();j++)         //寻找i的最小质因子
		{ 
			if(prime[j]*i>n)break;         //假如数据超过范围没有讨论的必要，直接结束本轮循环
			isprime[prime[j]*i]=0;        //不是i的最小质因子的话，那么去乘以i，这样得出的数字肯定是合数
                                                                       //这个时候prime[j]*i一定以prime[j]为最小质因子，因为它甚至还比i的最小质因子小
			if(!(i%prime[j]))break;         //一旦这个数是i的最小质因子，那么直接结束，因为假如这个质数不是i的最小质因子
			                                               //那么prime[j]*i就不一定以prime[j]为最小质因子了，可能是比prime[j]更小的数字
		}
	}
}

//AtCoder  AGC029A
/*根据题目意思，所有字符w必须在最左边，并且每次操作只能将一个w
向左移动一位，那么其实只要计算所有w都排在最右侧所需的操作次数就可以了
实际上就是每个w的下标数减去这个w前面还有的w的字符数
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	string s;
	cin>>s;
	long long ans = 0,countw=0;
	for (int i = 0; i < s.length(); i++)
	{
		if (s[i] == 'W')
		{
			countw++;
			ans += i;
		}
	}
	for (int i = 0; i < countw; i++)
		ans -= i;
	cout << ans;
	return 0;
}



//洛谷P4995
/*本题根据题目意思可以由数学证明，每次都移动到与自己当前高度相差最高的位置上
最后的体力值消耗最多
核心代码如下*/
void P4995()
{
	long long n,h,sum=0,count=0;
	deque<int> v;
	v.push_back(0);
	scanf("%lld",&n);
	while (n--)
	{
		scanf("%lld", &h);
		v.push_back(h);
	}
	sort(v.begin(), v.end());
	while (v.size()>1)
	{
		if(!(count%2))
		{
			sum += (long long)pow(v.back() - v.front(), 2);
			v.pop_front();
			count++;
		}
		else
		{
			sum += (long long)pow(v.back() - v.front(), 2);
			v.pop_back();
			count++;
		}
	}
	printf("%lld",sum);
}



///洛谷P1031
/*因为最左堆只能接受或者给予它右边的牌，我们尝试从最左堆开始讨论
由于每次拿的牌数量是随意的，其实牌转移过程可以等价转换。假如你最左边一堆牌是缺的，
那么我可以直接先从右边那堆拿足自己所需要的牌，就算右边那堆牌已经是满足题意了，
它再右边的牌肯定有超过平均数的，比如说平均数是avg，初始状态的排列比如是
avg-1，avg，avg+1，那么我进行变换
avg-1，avg，avg+1->avg，avg-1，avg+1->avg，avg，avg花费2步
avg-1，avg，avg+1->avg-1，avg+1，avg->avg，avg，avg也花费2步
这就是我所说牌转移过程可以等价转换的意思，所以我们不如直接每次把最左边一堆牌拿到符合题意的avg
然后剔除，重复以上过程，就算它的右边一堆牌是负数了，我已经讲了牌转移过程可以等价转换，没有任何影响
核心代码如下*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int sum=0,n,count=0,temp,a;
	cin>>n;
	vector<int> v;
	for(int i=0;i<n;i++)
	{
		cin>>temp;
		sum+=temp;
		v.push_back(temp);
	}
	a=sum/n;
	for(int i=0;i<n-1;i++)
	{
		if(v[i]!=a) 
		{
			v[i+1]-=(a-v[i]);
			count++;
		}
	}
	cout<<count;
	return 0;
}


//洛谷P1209
/*其实根据题目意思，我们可以先把序号升序排列，然后计算公差存到另一个数组中，
然后我们剔除最大的m-1个公差，再把剩下的公差按照一定的规律相加即可（注意不是简单地直接相加）。
假如m>c了我们不妨直接把所以公差都删了（第一次提交wa了栽在这里）
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int m, s, c, temp,tempc, sum = 0;
	vector<int> v,d;
	scanf("%d%d%d",&m,&s,&c);
	tempc = c;
	while (tempc--)
	{
		scanf("%d",&temp);
		v.push_back(temp);
	}
	sort(v.begin(), v.end());
	for (int i = 0; i < c-1; i++)
		d.push_back(v[i + 1] - v[i]);
	sort(d.begin(), d.end());
	if (d.size() < m) m = d.size()+1;
	for (int i = 0; i < m - 1; i++)
		d.pop_back();
	for (int i = 0; i < d.size(); i++)
		sum += d[i];
	printf("%d",sum+m);
	return 0;
}


//洛谷P1090
/*根据题目意思非常容易可以知道，每次把最小的两个数字相加，把结果加入到数组
再删去原来那两个数字，重复上述操作即为最终答案，思路非常简单
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int n, temp, sum = 0, tempsum;;
	scanf("%d",&n);
	priority_queue<int,vector<int>,greater<int>> v;
	int tempn = n;
	while (tempn--)
	{
		scanf("%d",&temp);
		v.push(temp);
	}
	for (int i = 0; i < n - 1; i++)
	{
		tempsum = v.top();
		v.pop();
		tempsum += v.top();
		v.pop();
		v.push(tempsum);
		sum += tempsum;
	}
	printf("%d",sum);
	return 0;
}



//洛谷P1106
/*由于要求高精度整数，我考虑使用string来进行操作
这道题目的思路非常经典，只要每次从最高位往后找数对，
每次删去找到的第一个逆序数对的第一个数，然后重复上述操作即可
总体思路需要嵌套循环，假如最高位出现0，直接去除而不算删去的数；
假如逆序数=0然而还有可以删去的数，那么就从最后一个数字往前删去
代码如下*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	string s;
	int k,count,delcount=0;
	cin>>s>>k;
	while(1)
	{
		count=0;
		for(int i=0;i<s.length()-1;)
	    {
	    	if(s[0]=='0')
			{
				s.erase(0,1);
				continue;
			}
			if(s[i]>s[i+1])
			{
				s.erase(i,1);
				delcount++;
				i++;
				if(delcount==k)goto g;
				break;
			}
			else 
			{
				i++;
				count++;
			}
			if(count==s.length()-1) goto g;
		}
	}
	g:
	if(delcount<k)
		for(int i=0;i<k-delcount;i++)
			s.erase(s.length()-1,1);
	cout<<s;
	return 0;
}
